{"version":3,"sources":["recipe.js","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","image","ingredients","className","style","recipe","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","process","response","json","data","hits","onSubmit","e","preventDefault","type","value","onChange","target","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"mQAkBeA,EAfA,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YACrC,OACI,sBAAKC,UAAWC,IAAMC,OAAtB,UACI,6BAAKN,IACL,6BACKG,EAAYI,KAAK,SAAAC,GAAU,OACxB,6BAAKA,EAAWC,YAGxB,4BAAIR,IACJ,qBAAKG,UAAWC,IAAMH,MAAOQ,IAAKR,EAAOS,IAAI,SCsC1CC,G,MA/CH,WAEV,IAFgB,EAKgBC,mBAAS,IALzB,mBAKRC,EALQ,KAKCC,EALD,OAMcF,mBAAS,IANvB,mBAMRG,EANQ,KAMAC,EANA,OAOYJ,mBAAS,IAPrB,mBAORK,EAPQ,KAODC,EAPC,KAShBC,qBAAW,WACTC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAZhB,WAYgB,oBAXfM,qCAUI,cACXC,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBZ,EAAWY,EAAKC,MAHC,2CAAH,qDAgBhB,OACE,sBAAKxB,UAAU,MAAf,UACE,uBAAMA,UAAU,cAAcyB,SARhB,SAAAC,GAChBA,EAAEC,iBACFZ,EAASH,GACTC,EAAU,KAKR,UACA,uBAAOb,UAAU,aAAa4B,KAAK,OAAOC,MAAOjB,EAAQkB,SAbxC,SAAAJ,GACnBb,EAAUa,EAAEK,OAAOF,UAajB,wBAAQ7B,UAAU,gBAAgB4B,KAAK,SAAvC,uBAIA,qBAAK5B,UAAU,UAAf,SACGU,EAAQP,KAAI,SAAAD,GAAM,OACjB,aADuB,CACtB,EAAD,CAAQN,MAAOM,EAAOA,OAAO8B,MAAOnC,SAAUK,EAAOA,OAAOL,SAC5DC,MAAOI,EAAOA,OAAOJ,MAAOC,YAAaG,EAAOA,OAAOH,aAAkBG,EAAOA,OAAO8B,iBChClFC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,yB","file":"static/js/main.1f52500f.chunk.js","sourcesContent":["import React from 'react';\r\nimport style from './recipe.module.css';\r\n\r\nconst Recipe = ({title, calories, image, ingredients}) => {\r\n    return(\r\n        <div className={style.recipe}>\r\n            <h1>{title}</h1>\r\n            <ol>\r\n                {ingredients.map( ingredient => (\r\n                    <li>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n            <p>{calories}</p>\r\n            <img className={style.image} src={image} alt=\"\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Recipe;","import React, { useEffect, useState } from \"react\";\nimport Recipe from './recipe';\nimport './App.css';\n\nconst App = () => {\n\n  const appId = \"28eb0f4e\";\n  const appKey = process.env.REACT_APP_API_KEY;\n  \n  const [ recipes, setRecipes ] = useState([]);\n  const [ search, setSearch ] = useState(\"\");\n  const [ query, setQuery ] = useState(\"\");\n\n  useEffect( () => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${appId}&app_key=${appKey}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value)\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n\n  return(\n    <div className=\"app\">\n      <form className=\"search-form\" onSubmit={getSearch} >\n      <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch} />\n      <button className=\"search-button\" type=\"submit\" >\n        Search\n      </button>\n      </form>\n      <div className=\"recipes\">\n        {recipes.map(recipe => ( // using () instead of {} b/c we're returning JSX\n          <Recipe title={recipe.recipe.label} calories={recipe.recipe.calories}\n          image={recipe.recipe.image} ingredients={recipe.recipe.ingredients} key={recipe.recipe.label} />\n        ))}\n      </div>\n    </div>  \n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__1ZHCh\",\"image\":\"recipe_image__3i79u\"};"],"sourceRoot":""}